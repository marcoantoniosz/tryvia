{"version":3,"sources":["helpers/fetchToken.js","redux/actions/index.js","pages/Login.js","pages/Settings.js","components/Header.js","helpers/fetchQuestions.js","components/Questions.js","helpers/consts.js","pages/GameScreen.js","pages/FeedBack.js","pages/Ranking.js","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/token.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["fetchToken","a","fetch","promise","json","data","getTokenThunk","dispatch","tokenObj","type","payload","token","Login","handleChange","target","name","value","setState","validadeButton","validateEmail","email","test","state","length","isDisabled","clickButton","event","preventDefault","props","getTokenProp","savePlayerDataProp","assertions","score","gravatarEmail","localStorage","setItem","toGameScreen","handleSettings","history","push","this","className","placeholder","data-testid","onChange","disabled","onClick","to","Component","connect","savePlayerData","Settings","React","Header","player","emailHash","md5","toString","image","src","alt","fetchQuestions","Questions","startTimer","Interval","setInterval","prevState","timer","clearInterval","handleAnswer","handleQuestions","index","responseCode","response_code","results","question","getOptions","answerOptions","correct_answer","incorrect_answers","shuffleOptions","shuffleArray","handleClick","wrongAs","rightAs","nextEnable","arr","i","j","Math","floor","random","verifyAnswer","correct","option","incorrect","forEach","element","teste","getPoints","dificulty","points","saveScoreProp","dados","JSON","parse","getItem","playerIndex","findIndex","dado","stringify","handleClickAnswer","correctAnswerProp","difficulty","styleChange","border","picture","nextBtn","Object","keys","decode","category","map","key","style","saveScore","GameScreen","FeedBack","Ranking","getData","orderData","sort","dadoA","dadoB","console","log","lenght","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95453c03.chunk.js","sourcesContent":["const fetchToken = async () => {\n  try {\n    const promise = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await promise.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchToken;\n","import fetchToken from '../../helpers/fetchToken';\n\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nexport const PLAYER_DATA = 'PLAYER_DATA';\nexport const SAVE_SCORE = 'SAVE_SCORE';\nexport const CORRECT_ANSWER = 'CORRECT_ANSWER';\n\nexport const getTokenSuccess = (payload) => ({\n  type: GET_TOKEN_SUCCESS,\n  payload,\n});\n\nexport const savePlayerData = (payload) => ({\n  type: PLAYER_DATA,\n  payload,\n});\n\nexport const getTokenThunk = () => async (dispatch) => {\n  const tokenObj = await fetchToken();\n  dispatch(getTokenSuccess(tokenObj.token));\n};\n\nexport const saveScore = (payload) => ({\n  type: SAVE_SCORE,\n  payload,\n});\n\nexport const correctAnswer = () => ({\n  type: CORRECT_ANSWER,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\nimport PropTypes from 'prop-types';\nimport { getTokenThunk, savePlayerData } from '../redux/actions';\nimport '../styles/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n      isDisabled: true,\n      toGameScreen: false,\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.validadeButton());\n  }\n\n  // FONTE: funcao para  validar email link: https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript\n  validateEmail = (email) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  }\n\n  validadeButton = () => {\n    const { name, email } = this.state;\n    if (name.length > 0 && this.validateEmail(email)) {\n      this.setState({ isDisabled: false });\n    } else {\n      this.setState({ isDisabled: true });\n    }\n  }\n\n  // da um fetchAPI e salva o token na store, pega o token da store e salva no local storage, da o redirect\n  clickButton = async (event) => {\n    event.preventDefault();\n    const { name, email } = this.state;\n    const { getTokenProp, savePlayerDataProp } = this.props;\n    savePlayerDataProp({ name, assertions: 0, score: 0, gravatarEmail: email });\n    await getTokenProp();\n    const { token } = this.props;\n    localStorage.setItem('token', token);\n    this.setState({ toGameScreen: true });\n  }\n\n  // função que encaminha para a página settings\n  handleSettings = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { name, email, isDisabled, toGameScreen } = this.state;\n    return (\n      <div>\n        <form className=\"Form_Login\">\n          <h3 className=\"Login_Title\"> Trivia </h3>\n          <input\n            className=\"Login_Input\"\n            type=\"text\"\n            name=\"name\"\n            value={ name }\n            placeholder=\"Nome\"\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n          />\n          <input\n            className=\"Login_Input\"\n            type=\"email\"\n            name=\"email\"\n            value={ email }\n            placeholder=\"Email\"\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n          />\n          <button\n            className=\"Login_Button\"\n            type=\"submit\"\n            disabled={ isDisabled }\n            data-testid=\"btn-play\"\n            onClick={ this.clickButton }\n          >\n            Play\n          </button>\n          {toGameScreen && <Redirect to=\"/game\" />}\n          <button\n            className=\"Login_Button\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ this.handleSettings }\n          >\n            Settings\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getTokenProp: PropTypes.func,\n  token: PropTypes.string,\n  savePlayerDataProp: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getTokenProp: () => dispatch(getTokenThunk()),\n  savePlayerDataProp: (payload) => dispatch(savePlayerData(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <header>\n        <h1 data-testid=\"settings-title\">\n          Trivia\n        </h1>\n      </header>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport '../styles/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { player: { name, gravatarEmail, score } } = this.props;\n    const emailHash = md5(gravatarEmail).toString();\n    const image = (`https://www.gravatar.com/avatar/${emailHash}`);\n    return (\n      <header className=\"Header_Content\">\n        <img\n          className=\"Header_Image\"\n          src={ image }\n          alt=\"gravatar_image\"\n          data-testid=\"header-profile-picture\"\n        />\n        <h1\n          className=\"Header_Title\"\n          data-testid=\"header-player-name\"\n        >\n          {name}\n        </h1>\n        <span className=\"Header_Score\">\n          Placar:\n          <span data-testid=\"header-score\" className=\"Header_Score\">\n            {score}\n          </span>\n        </span>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  player,\n});\n\nHeader.propTypes = {\n  player: propTypes.shape({\n    gravatarEmail: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    score: propTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","const fetchQuestions = async (token) => {\n  try {\n    const promise = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await promise.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchQuestions;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { decode } from 'he';\nimport fetchQuestions from '../helpers/fetchQuestions';\nimport { getTokenThunk, saveScore, correctAnswer } from '../redux/actions';\nimport '../App.css';\nimport { ONE_SECOND, LIMIT_BUTTON_TIMER, INICIAL_POINTS, EXPIDER_TOKEN_RESULT,\n  EASY, MEDIUM, HARD, LIMIT_INDEX_QUESTIONS } from '../helpers/consts';\nimport '../styles/Questions.css';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      results: [],\n      index: 0,\n      wrongAs: '',\n      rightAs: '',\n      timer: 30,\n      question: {},\n      shuffleOptions: [],\n      nextEnable: false,\n      isDisabled: true,\n    };\n  }\n\n  async componentDidMount() {\n    await this.handleQuestions();\n    this.startTimer();\n    const { gravatarEmail, name } = this.props;\n    const emailHash = md5(gravatarEmail).toString();\n    const image = (`https://www.gravatar.com/avatar/${emailHash}`);\n    const dados = JSON.parse(localStorage.getItem('ranking'));\n    if (dados) {\n      const playerIndex = dados.findIndex((dado) => dado.name === name);\n      if (playerIndex >= 0) {\n        dados[playerIndex].score = 0;\n        localStorage.setItem('ranking', JSON.stringify(dados));\n      } else {\n        localStorage.setItem('ranking', JSON.stringify(\n          [...dados, { name, score: 0, picture: image }],\n        ));\n      }\n    } else {\n      localStorage.setItem('ranking', JSON.stringify([\n        { name, score: 0, picture: image }]));\n    }\n  }\n\n  startTimer = () => {\n    const Interval = setInterval(() => {\n      this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n      const { timer } = this.state;\n      if (timer === LIMIT_BUTTON_TIMER) {\n        this.setState({ isDisabled: false });\n      }\n      if (timer === 0) {\n        clearInterval(Interval);\n        this.handleAnswer();\n      }\n    }, ONE_SECOND);\n  }\n\n  handleQuestions = async () => {\n    const { index } = this.state;\n    const { token, getTokenProp } = this.props;\n    const { response_code: responseCode, results } = await fetchQuestions(token);\n    if (responseCode === EXPIDER_TOKEN_RESULT || token === '') {\n      await getTokenProp();\n      return this.handleQuestions();\n    }\n    this.setState({\n      results, question: results[index],\n    }, localStorage.setItem('token', token));\n    this.getOptions();\n  }\n\n  getOptions = () => {\n    const { question } = this.state;\n    const answerOptions = [question.correct_answer, ...question.incorrect_answers];\n    const shuffleOptions = this.shuffleArray(answerOptions);\n    this.setState({ shuffleOptions });\n  }\n\n  handleClick = () => {\n    const { results, index } = this.state;\n    this.setState((prevState) => ({\n      index: prevState.index + 1,\n      wrongAs: '',\n      rightAs: '',\n      nextEnable: false,\n    }));\n    if (index === LIMIT_INDEX_QUESTIONS) {\n      const { push } = this.props;\n      push('/feedback');\n    }\n    this.setState({\n      question: results[index + 1], timer: 30, isDisabled: true },\n    () => this.getOptions());\n    this.startTimer();\n  }\n  // FONTE: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n\n  shuffleArray = (arr) => {\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  verifyAnswer = (correct, option, incorrect) => {\n    if (correct === option) {\n      return 'correct-answer';\n    }\n    let teste;\n    incorrect.forEach((element, i) => {\n      if (element === option) teste = i;\n    });\n    return `wrong-answer-${teste}`;\n  }\n\n  handleAnswer = () => {\n    this.setState({\n      wrongAs: '3px solid rgb(255, 0, 0)',\n      rightAs: '3px solid rgb(6, 240, 15)',\n      nextEnable: true,\n      isDisabled: true,\n    });\n  }\n\n  getPoints = (dificulty, timer) => {\n    let points;\n    switch (dificulty) {\n    case 'easy':\n      points = INICIAL_POINTS + (timer * EASY);\n      break;\n    case 'medium':\n      points = INICIAL_POINTS + (timer * MEDIUM);\n      break;\n    case 'hard':\n      points = INICIAL_POINTS + (timer * HARD);\n      break;\n    default:\n      break;\n    }\n    const { name, saveScoreProp } = this.props;\n    const dados = JSON.parse(localStorage.getItem('ranking'));\n    const playerIndex = dados.findIndex((dado) => dado.name === name);\n    dados[playerIndex].score += points;\n    saveScoreProp(dados[playerIndex].score);\n    localStorage.setItem('ranking', JSON.stringify(dados));\n  }\n\n  handleClickAnswer = (event, correct) => {\n    const { correctAnswerProp } = this.props;\n    this.handleAnswer();\n    if (event.target.value === correct) {\n      correctAnswerProp();\n      const { timer, question } = this.state;\n      this.getPoints(question.difficulty, timer);\n    }\n    this.setState({ timer: 1 });\n  }\n\n  styleChange = (option, correct) => {\n    const { wrongAs, rightAs } = this.state;\n    if (option === correct) return { border: rightAs };\n    return { border: wrongAs };\n  }\n\n  render() {\n    const nextBtn = (\n      <button\n        className=\"Next_Button\"\n        type=\"button\"\n        data-testid=\"btn-next\"\n        onClick={ this.handleClick }\n      >\n        Próxima\n      </button>\n    );\n    const { question, shuffleOptions, timer, nextEnable, isDisabled } = this.state;\n    if (Object.keys(question).length > 0) {\n      return (\n        <div>\n          <span className=\"Timer\">{ timer }</span>\n          <h2 data-testid=\"question-category\" className=\"Category\">\n            {decode(question.category)}\n          </h2>\n          <p\n            data-testid=\"question-text\"\n            className=\"Question\"\n          >\n            {decode(question.question)}\n          </p>\n          <div data-testid=\"answer-options\">\n            {\n              shuffleOptions.map((option, index) => (\n                <button\n                  className=\"Options_Button\"\n                  value={ option }\n                  key={ index }\n                  type=\"button\"\n                  style={ this.styleChange(option, question.correct_answer) }\n                  onClick={ (event) => this.handleClickAnswer(event,\n                    question.correct_answer) }\n                  data-testid={\n                    this.verifyAnswer(question.correct_answer, option,\n                      question.incorrect_answers)\n                  }\n                  disabled={ isDisabled }\n                >\n                  {decode(option)}\n                </button>\n              ))\n            }\n          </div>\n          { nextEnable && nextBtn }\n        </div>\n      );\n    }\n    return (\n      <div> Loading </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  token: propTypes.string,\n  getTokenProp: propTypes.func,\n  gravatarEmail: propTypes.string,\n  name: propTypes.string,\n  saveScoreProp: propTypes.func,\n  push: propTypes.func,\n  correctAnswerProp: propTypes.func,\n}.isRequired;\n\nconst mapStateToProps = ({ token, player }) => ({\n  token,\n  name: player.name,\n  gravatarEmail: player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getTokenProp: () => dispatch(getTokenThunk()),\n  saveScoreProp: (payload) => dispatch(saveScore(payload)),\n  correctAnswerProp: () => dispatch(correctAnswer()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","export const ONE_SECOND = 1000;\nexport const LIMIT_BUTTON_TIMER = 25;\nexport const INICIAL_POINTS = 10;\nexport const EASY = 1;\nexport const MEDIUM = 2;\nexport const HARD = 3;\nexport const LIMIT_INDEX_QUESTIONS = 4;\nexport const EXPIDER_TOKEN_RESULT = 3;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Questions from '../components/Questions';\n\nexport default class GameScreen extends Component {\n  render() {\n    const { history: { push } } = this.props;\n    return (\n      <div>\n        <Header />\n        <Questions push={ push } />\n      </div>\n    );\n  }\n}\n\nGameScreen.propTypes = {\n  History: propTypes.shape({\n    push: propTypes.func.isRequired,\n  }).isRequired,\n}.isRequired;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\n\nconst MIN_POINTS = 3;\n\nclass FeedBack extends Component {\n  render() {\n    const { assertions, score } = this.props;\n    return (\n      <div>\n        <Header />\n        <span\n          data-testid=\"feedback-text\"\n          className=\"text main\"\n        >\n          { assertions < MIN_POINTS ? 'Could be better...' : 'Well Done!'}\n        </span>\n        <br />\n        <p className=\"text\">\n          Pontos:\n          {' '}\n          <span data-testid=\"feedback-total-score\" className=\"text\">{ score }</span>\n        </p>\n        <p className=\"text\">\n          Total de Acertos:\n          {' '}\n          <span data-testid=\"feedback-total-question\" className=\"text\">{assertions}</span>\n        </p>\n        <Link to=\"/\">\n          <button\n            data-testid=\"btn-play-again\"\n            type=\"button\"\n            className=\"Play_Button\"\n          >\n            Play Again\n          </button>\n        </Link>\n        <br />\n        <Link to=\"/ranking\">\n          <button\n            data-testid=\"btn-ranking\"\n            type=\"button\"\n            className=\"Ranking_Button\"\n          >\n            Ver Ranking\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n});\n\nFeedBack.propTypes = {\n  assertions: propTypes.number.isRequired,\n  score: propTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(FeedBack);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport '../styles/Ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dados: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = () => {\n    const dados = JSON.parse(localStorage.getItem('ranking'));\n    const orderData = dados.sort((dadoA, dadoB) => dadoB.score - dadoA.score);\n    console.log(orderData);\n    if (orderData) return this.setState({ dados });\n  }\n\n  render() {\n    const { dados } = this.state;\n    if (dados.lenght === 0) return (<div>Nenhum dado disponível</div>);\n    return (\n      <div>\n        <header>\n          <h1 className=\"ranking_title\" data-testid=\"ranking-title\">\n            Ranking\n          </h1>\n        </header>\n        <div className=\"rank_content\">\n          {\n            dados.map(({ name, picture, score }, index) => (\n              <div key={ index } className=\"player_card\">\n\n                <img src={ picture } alt={ name } className=\"player_image\" />\n                <h2\n                  className=\"ranking_subtitle\"\n                  data-testid={ `player-name-${index}` }\n                >\n                  {name}\n\n                </h2>\n                <h2\n                  className=\"ranking_subtitle\"\n                  data-testid={ `player-score-${index}` }\n                >\n                  {score}\n\n                </h2>\n              </div>\n            ))\n          }\n        </div>\n        <Link to=\"/\">\n          <button\n            data-testid=\"btn-go-home\"\n            type=\"button\"\n            className=\"Home_Button\"\n          >\n            Play Again\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   assertions: state.player.assertions,\n//   score: state.player.score,\n// });\n\n// Ranking.propTypes = {\n//   assertions: propTypes.number.isRequired,\n//   score: propTypes.number.isRequired,\n// };\n\nexport default connect()(Ranking);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport GameScreen from './pages/GameScreen';\nimport FeedBack from './pages/FeedBack';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/game\" component={ GameScreen } />\n        <Route exact path=\"/feedback\" component={ FeedBack } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { PLAYER_DATA, SAVE_SCORE, CORRECT_ANSWER } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nfunction player(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case PLAYER_DATA:\n    return action.payload;\n  case SAVE_SCORE:\n    return {\n      ...state,\n      score: action.payload,\n    };\n  case CORRECT_ANSWER:\n    return { ...state,\n      assertions: state.assertions + 1 };\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","import { GET_TOKEN_SUCCESS } from '../actions';\n\nfunction token(state = '', action) {\n  switch (action.type) {\n  case GET_TOKEN_SUCCESS:\n    return action.payload;\n  default:\n    return state;\n  }\n}\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}